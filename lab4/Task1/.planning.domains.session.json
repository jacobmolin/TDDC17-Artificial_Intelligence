{
    "hash": "2BSuWCwI9l",
    "writeHash": "fetGDVhzcnNzLTD",
    "versionDate": "2020-10-26T09:40:47.000Z",
    "files": {
        "domain.pddl": "(define (domain shacketys-world)\n\n    (:requirements\n        :strips \n        :typing \n        :adl\n        :equality\n    )\n\n    (:types\n        room\n        lightSwitch\n        box\n        smallObject\n        grip\n        shackety\n    )\n\n    (:predicates\n        (adjacent    ?r1 ?r2 - room)                  ; room1 is next to room2\n        (at          ?s - shackety ?r - room)           ; shackety is in room\n        (attached    ?ls - lightSwitch ?r - room)       ; there is a lightswitch in the room\n        (placed      ?b - box ?r - room)       ; the box is placed in the room.\n        (wideDoor ?r1 ?r2 - room)                    ; there is a wide door connecting the rooms\n        (lightsAreOn ?ls - lightSwitch)           ; the lightSwitch in the room is on\n        (objectPlaced ?o - smallObject ?r - room)\n        (gripBusy ?g - grip)\n        (gripped ?o - smallObject ?g - grip)\n    )\n    \n    (:action move\n        :parameters (?s - shackety ?start ?end - room)\n        ; Only move if the rooms are adjacent and Shackety is in the start room\n        :precondition (and (or (adjacent ?start ?end) (adjacent ?end ?start)) (at ?s ?start))\n        ; Move Shakety from start to end room\n        :effect (and (at ?s ?end) (not (at ?s ?start)))\n    )\n\n    (:action turnLightsOn\n        :parameters (?s - shackety ?b - box ?ls - lightSwitch ?r - room) \n        ; Only turn the light on if Shackety is in the room, \n        ; the box is placed in the room, there is a light switch in the room\n        ; and the light is not already on\n        :precondition (and (at ?s ?r) (placed ?b ?r) (attached ?ls ?r) (not (lightsAreOn ?ls)))\n        ; Turn lights on in the room\n        :effect (lightsAreOn ?ls)\n    )\n\n    (:action pickupObject\n        :parameters (?s - shackety ?o - smallObject ?r - room ?g - grip ?ls - lightSwitch)\n        :precondition ( \n            and \n            (at ?s ?r) \n            (lightsAreOn ?ls)\n            (attached ?ls ?r)\n            (not(gripBusy ?g)) \n            (objectPlaced ?o ?r)\n        )\n        :effect (\n            and\n            (gripBusy ?g)\n            (gripped ?o ?g)\n            (not (objectPlaced ?o ?r))\n        )\n    )\n\n    (:action placeObject\n        :parameters (?s - shackety ?o - smallObject ?r - room ?g - grip)\n        :precondition (\n            and\n            (at ?s ?r)\n            (gripped ?o ?g)\n            (not (objectPlaced ?o ?r))\n        )\n        :effect (\n            and\n            (not (gripBusy ?g))\n            (not (gripped ?o ?g))\n            (objectPlaced ?o ?r)\n        )\n    )\n\n    (:action moveWithBox\n        :parameters (?s - shackety ?b - box ?start ?end - room)\n        ; Only push the box if the rooms are adjacent, the box is in the start room,\n        ; Shackety is in the start room and there is wide door connecting the rooms\n        :precondition (\n            and\n            (at ?s ?start)\n            (placed ?b ?start)\n            (or (adjacent ?start ?end) (adjacent ?end ?start))\n            (or (wideDoor ?start ?end) (wideDoor ?end ?start))\n        )\n        ; Move Shackety and the box from start to end room\n        :effect (and (at ?s ?end) (not (at ?s ?start)) (placed ?b ?end) (not (placed ?b ?start)))\n    )\n)",
        "domain.ptest.json": "{\r\n  \"defaultDomain\": \"domain.pddl\",\r\n  \"defaultOptions\": \"\",\r\n  \"cases\": [\r\n    {\r\n      \"problem\": \"problem.pddl\"\r\n    }\r\n  ]\r\n}",
        "elapsed.time": "Command exited with non-zero status 127\n0.00\n0.00\n\n",
        "problem.pddl": "(define (problem shacketys-prob)\n\n    (:domain shacketys-world)\n\n    ;  Below is a graphic representation of the initial states in the domain\n    ; lightswitch = ls\n    ; wide door = two spaces\n    ; narrow door = one space\n    ;\n    ;|--------------|---------------|---------------|\n    ;|   (room 1)   |   (room 2)    |    (room 3)   |\n    ;|    ls: off   |    ls: off    |     ls: on    |\n    ;|   Shackety          box                      |\n    ;|                              |               |\n    ;|   o1 o2      |     o5        |               |\n    ;|----      ----|---------------|---------------|\n    ;|              | \n    ;|   o3 o4      | \n    ;|              |\n    ;|   (room 4)   | \n    ;|   ls: off    |\n    ;|--------------|\n\n\n    (:objects\n        r1 r2 r3 r4 - room              ; Four rooms in the world \n        ls1 ls2 ls3 ls4 - lightSwitch   ; One lightswitch per room\n        b - box                         ; One box in the world\n        o1 o2 o3 o4 o5 - smallObject    ; Five small objects\n        s - shackety\n        gL gR - grip                    ; One left and one right grip\n    )\n\n    (:init\n        ; World layout as depicted above\n        (adjacent    r1 r2)\n        (adjacent    r1 r4)\n        (adjacent    r2 r3)\n        (at          s r1)\n        (attached    ls1 r1)\n        (attached    ls2 r2)\n        (attached    ls3 r3)\n        (attached    ls4 r4)\n        (lightsAreOn ls3)\n        (placed      b r2)\n        (wideDoor r1 r2)\n        (wideDoor r1 r4)\n        (objectPlaced o1 r1)\n        (objectPlaced o2 r1)\n        (objectPlaced o3 r4)\n        (objectPlaced o4 r4)\n        (objectPlaced o5 r2)\n    )\n\n    ; The goal is to have all small objects in room 3\n    (:goal\n        (and\n            (objectPlaced o1 r3)\n            (objectPlaced o2 r3)\n            (objectPlaced o3 r3)\n            (objectPlaced o4 r3)\n            (objectPlaced o5 r3)\n        )\n    )\n)"
    },
    "plugins": {}
}