{
    "hash": "I2Sajar1EL",
    "writeHash": "e4KozsKpqPF3kDD",
    "versionDate": "2020-10-07T09:52:50.000Z",
    "files": {
        "domain.pddl": "(define (domain shacketys-world)\n\n    (:requirements\n        :strips \n        :typing \n        :adl\n        :equality\n    )\n\n    (:types\n        room\n        lightSwitch\n        box\n        shackety\n    )\n\n    (:predicates\n        (adjacent    ?r1 ?r2 - room)                  ; room1 is next to room2\n        (at          ?s - shackety ?r - room)           ; shackety is in room\n        (attached    ?ls - lightSwitch ?r - room)       ; there is a lightswitch in the room\n        (placed      ?b - box ?r - room)       ; the box is placed in the room.\n        (wideDoor ?r1 ?r2 - room)                    ; there is a wide door connecting the rooms\n        (lightsAreOn ?ls - lightSwitch)           ; the lightSwitch in the room is on\n    )\n\n    (:action move\n        :parameters (?s - shackety ?start ?end - room)\n        ; Only move if the rooms are adjacent and Shackety is in the start room\n        :precondition (and (or (adjacent ?start ?end) (adjacent ?end ?start)) (at ?s ?start))\n        ; Move Shakety from start to end room\n        :effect (and (at ?s ?end) (not (at ?s ?start)))\n    )\n\n    (:action turnLightsOn\n        :parameters (?s - shackety ?b - box ?ls - lightSwitch ?r - room) \n        ; Only turn the light on if Shackety is in the room, \n        ; the box is placed in the room, there is a light switch in the room\n        ; and the light is not already on\n        :precondition (and (at ?s ?r) (placed ?b ?r) (attached ?ls ?r) (not (lightsAreOn ?ls)))\n        ; Turn lights on in the room\n        :effect (lightsAreOn ?ls)\n    )\n\n    (:action moveWithBox\n        :parameters (?s - shackety ?b - box ?start ?end - room)\n        ; Only push the box if the rooms are adjacent, the box is in the start room,\n        ; Shackety is in the start room and there is wide door connecting the rooms\n        :precondition (\n            and\n            (at ?s ?start)\n            (placed ?b ?start)\n            (or (adjacent ?start ?end) (adjacent ?end ?start))\n            (or (wideDoor ?start ?end) (wideDoor ?end ?start))\n        )\n        ; Move Shackety and the box from start to end room\n        :effect (and (at ?s ?end) (not (at ?s ?start)) (placed ?b ?end) (not (placed ?b ?start)))\n    )\n)",
        "domain.ptest.json": "{\r\n  \"defaultDomain\": \"domain.pddl\",\r\n  \"defaultOptions\": \"\",\r\n  \"cases\": [\r\n    {\r\n      \"problem\": \"problem.pddl\"\r\n    }\r\n  ]\r\n}",
        "domain_emma.pddl": "; Hello World example domain\n(define (domain shackey)\n\n    (:requirements \n    :strips \n    :typing \n    :adl\n    :equality\n    )\n\n    (:types \n    room \n    lightSwitch \n    wideDoor \n    box \n    shackey\n    )\n\n    (:predicates\n        (adjacent ?r1 ?r2 - room) ; Room 1 next to room 2\n        (at       ?s - shackey ?r2 - room) ; Shackey is located in a room\n        (attached ?ls - lightSwitch ?r - room) ; Lightswitch in room\n        (placed   ?b - box ?r - room) ; The box is placed in a room.\n        (wideOpening ?r - room ?wd - wideDoor) ; There is a wide door at room 2\n        (lightsOn ?ls - lightSwitch) ; The lightSwitch in the room is on\n    )\n\n; this action greets one thing by its name\n    (:action move\t\t\t\t;move from oone room to another\n        :parameters (?s - shackey ?from ?to - room)\n        :precondition (and (or (adjacent ?from ?to) (adjacent ?to ?from))\n                            (at ?s ?from))\n\n        :effect (and (at ?s ?to) \n                (not (at ?s ?from)))\n   )\n\n   (:action turnLightsOn\n       :parameters (?s - shackey ?ls - lightSwitch ?r - room ?b - box)\n       :precondition (and (at ?s ?r) \n                          (attached ?ls ?r)\n                          (not (lightsOn ?ls))\n                          (placed ?b ?r))\n       :effect (lightsOn ?ls)\n   )\n   \n   (:action pushBox ;push the box from a room to another\n       :parameters (?s - shackey ?b - box ?from ?to - room ?wd - wideDoor)\n       :precondition (and (placed ?b ?from)\n                    (at ?s ?from)\n                    (or (adjacent ?from ?to) (adjacent ?to ?from))\n                    (wideOpening ?to ?wd)\n                    (wideOpening ?from ?wd))\n       :effect (and (at ?s ?to)\n                (not (at ?s ?from))\n                (placed ?b ?to)\n                (not (placed ?b ?from)))\n   )\n)\n",
        "domain_emma_heli.pddl": "; Hello World example domain\n\n(define (domain hello)\n\n(:requirements \n    :strips \n    :typing \n    :negative-preconditions\n    :adl\n    :equality\n    :disjunctive-preconditions)\n\n(:types thing crate person helicopter location)\n\n(:predicates\n    (placed ?c - crate ?l - location) ; crate at locationCrate \n        (at ?h - helicopter ?l - location); helicopter at locationCrate\n        (adjacent ?lc ?lp - location) ; locationCrate adj to locationPerson\n        (attached ?p - person ?lp - location) ; injured person at injLocation\n        (crateOnH ?h - helicopter ?c - crate) ; crate on helicopter \n        (pickCrate ?h - helicopter ?c - crate) ; pick the crate with helicopter\n        (dropCrate ?h - helicopter ?c - crate) ; drop the crate with helicopter\n\n)\n\n; This action moves the helicopter from one location to another\n    (:action moveHeli\n        :parameters (?h - helicopter ?from ?to - location)\n        :precondition (and\n            (or (adjacent ?from ?to) (adjacent ?to ?from)\n            (at ?h ?from))\n        )\n        :effect (and (at ?h ?to) \n                    (not (at ?h ?from))\n                )\n        \n    )\n\n; This action moves the crate with the help of the helicopter\n    (:action moveCrate\n       :parameters (?h - helicopter ?c - crate ?from ?to - location)\n        :precondition (and (placed ?c ?from)\n                      (at ?h ?from)\n                      (or (adjacent ?from ?to) (adjacent ?to ?from))\n                      (crateOnH ?h ?c )\n        )\n        :effect (and (placed ?c ?to) \n                     (not (placed ?c ?from))\n                     (at ?h ?to) \n                     (not (at ?h ?from))\n                )\n    )\n\n; This actions picks up the crate\n    (:action pickUp\n        :parameters (?h - helicopter ?c - crate ?lc - location)\n        :precondition (and \n            (at ?h ?lc)\n            (not (crateOnH ?h ?c))  \n        )\n        :effect \n            (crateOnH ?h ?c)\n    )\n\n; This action drops the crate\n    (:action drop\n        :parameters (?h - helicopter ?c - crate ?lc - location)\n        :precondition (and \n            (at ?h ?lc)\n            (crateOnH ?h ?c) \n        )\n        :effect (not (crateOnH ?h ?c))\n    )\n\n)\n",
        "elapsed.time": "Command exited with non-zero status 127\n0.00\n0.00\n\n",
        "problem.pddl": "(define (problem shacketys-prob)\n\n(:domain shacketys-world)\n\n;  Below is a graphic representation of the initial states in the domain\n; lightswitch = ls\n; wide door = two spaces\n; narrow door = one space\n;\n;|--------------|---------------|---------------|\n;|   (room 1)   |   (room 2)    |    (room 3)   |\n;|    ls: off   |    ls: off    |     ls: off   |\n;|   Shackety          box                      |\n;|                              |               |\n;|              |               |               |\n;|----      ----|---------------|---------------|\n;|              | \n;|              | \n;|              |\n;|   (room 4)   | \n;|   ls: off    |\n;|--------------|\n\n\n(:objects\n    r1 r2 r3 r4 - room              ; Four rooms in the world \n    ls1 ls2 ls3 ls4 - lightSwitch   ; One lightswitch per room\n    b - box                         ; One box in the world\n    s - shackety\n)\n\n(:init\n    ; World layout as depicted above\n    (adjacent    r1 r2)\n    (adjacent    r1 r4)\n    (adjacent    r2 r3)\n    (at          s r1)\n    (attached    ls1 r1)\n    (attached    ls2 r2)\n    (attached    ls3 r3)\n    (attached    ls4 r4)\n    (lightsAreOn ls3)\n    (placed      b r2)\n    (wideDoor r1 r2)\n    (wideDoor r1 r4)\n)\n\n; The goal is to have all the lights turned on\n(:goal\n    (and\n        (lightsAreOn ls1)\n        (lightsAreOn ls2)\n        (lightsAreOn ls3)\n        (lightsAreOn ls4)\n    )\n)\n)\n",
        "problem_emma.pddl": "; Hello World example problem\n\n(define (problem shackeys-world)\n\n(:domain shackey)\n\n(:objects\n    ; the only thing is the `world`\n    r1 r2 r3 - room\n    ls1 ls2 ls3 - lightSwitch\n    wd1 wd2 - wideDoor\n    b - box\n    s - shackey\n)\n\n(:init\n    ; Let's assume that the world can hear us\n    (adjacent r1 r2) (adjacent r2 r3)\n    (at s r2)\n    (attached ls1 r1) (attached ls2 r2) (attached ls3 r3)\n    (placed b r1)\n    (wideOpening r1 wd1) (wideOpening r2 wd1) (wideOpening r2 wd2) (wideOpening r3 wd2)\n)\n\n(:goal\n    (and\n        ; The only goal is to reach a state where all lights are on\n        (and (lightsOn ls1)\n             (lightsOn ls2)\n             (lightsOn ls3)\n        )\n    )\n)\n)",
        "problem_emma_heli.pddl": "; Hello World example problem\n\n(define (problem hello-world)\n\n(:domain hello)\n\n(:objects\n    ; We have a location storing the crates and then each injured person is at a distinct location.\n        locCrate locPerson1 locPerson2 locPerson3 - location\n        food medicine water - crate\n        inj1 inj2 inj3 - person\n        h1 h2 - helicopter\n)\n\n(:init\n    ; From the start all crates are located at the carte location along with the two helicopters.\n        (adjacent locCrate locPerson1) (adjacent locCrate locPerson2) (adjacent locCrate locPerson3)\n        (placed food locCrate) (placed medicine locCrate) (placed water locCrate)\n        (at h1 locCrate)  (at h2 locCrate)\n\n)\n\n(:goal\n    (and\n        (placed food locPerson1)\n        (placed medicine locPerson2)\n        (placed water locPerson3)\n        \n    )\n)\n)\n"
    },
    "plugins": {}
}